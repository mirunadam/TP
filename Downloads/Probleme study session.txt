//  Write a function that takes two unsigned, n and k and returns the number obtained by rotating the bits of n
// left by k positions (bits removed on the left are inserted at right). Handle arbitrary values for k (i.e. k might be above the
// number of bits of n).

#include<stdio.h>
#include<stdint.h>
#define DEBUG 0

unsigned rotate_bits_left(unsigned n, unsigned k)
{
    //se extrage leftmost bit si se aduce dintr o miscare in pozitia din dreapta, pregatindu l pentru concatenare
    unsigned leftmost_bits = n >> (sizeof(n) * 8 - k);
#if DEBUG
printf("%ld\n", sizeof(unsigned) * 8);
printf("%d\n", leftmost_bits);
#endif
    n <<= k;
    //n se shifteaza cu k pozitii la stanga, precum se cere in enunt
#if DEBUG
printf("%x\n", n);
#endif
    n |= leftmost_bits;
    //se concateneaza n (care a fost shiftat in prealabil) cu chunk ul extras leftmost_bits
    return n;
}

int main ()
{
    unsigned n = 0xAB175EF9;
    unsigned k = 4;
    printf("%x",rotate_bits_left(n,k));
    return 0;
}
/*

se extrage A 
n se shifteaza cu 4 in stanga si devine B175EF90
se concateneaza:
0000000A
B175EF90

=

B175EF9A
*/



------------------------------------------------------------------------------------------------

// (10 points) Implement a function that receives two, exactly 64-bit, unsigned values and returns an 8-bit unsigned number
// having bit on position i set if-and-only-if the bytes in position i of both the arguments are having the same value.
// Note:You shall use C bitwise operators

#include<stdio.h>
#include<stdint.h>
#define DEBUG 1

int compare_bytes(uint64_t a, uint64_t b, int i)
{
    //se extrag BYTESII de pe pozitia i(inmultim cu 8 pt ca i merge de la 0 la 8 iar un byte are 8 bites)
    uint64_t extracted_byte_a = (a >> (i * 8)) & 0xFF;
    uint64_t extracted_byte_b = (b >> (i * 8)) & 0xFF;
#if DEBUG
printf("%x %x\n",extracted_byte_a, extracted_byte_b);
#endif
    //comparam bytesii extrasi, returnand o valoare nenula daca sunt egali respectiv 0 daca nu
    if(extracted_byte_a == extracted_byte_b) return 1;
    return 0;
}

int main ()
{
    
    uint64_t a = 0x1122334455667788;
    uint64_t b = 0x1122334455778899;
    uint8_t result = 0;
    
    for(int i = 0; i < sizeof(result) * 8; i ++){
        //se shifteaza result inainte de fiecare operatie pentru a face loc noii valori
        result <<= 1;
        if(compare_bytes(a, b, i)){
            //daca bytesii sunt egali valoarea se va transforma in 1 cu ajutorul operatiei |
            result |= 0x1;
        }
    }
    printf("%d", result);
    return 0;



-----------------------------------------------------------------------------------------------

//  (10 points) Write a function returning the maximum of all values obtained by repeated application of
// swaprot() to a 32-bit integer value received as a parameter. swaprot() computes a value as follows: swaps
// the two 16-bit halves and rotates right by 4 bits the obtained number (rightmost bits are inserted leftmost).

#include<stdio.h>
#include<stdint.h>

uint32_t rotate_right(uint32_t n)
{
    //se extrage nibble ul din partea dreapta si se shifteaza la stanga pentru a il plasa in pozitie pentru concatenare
    uint32_t rightmost_nibble = n << (sizeof(n) * 8 - 4);
    return (n >> 4) | rightmost_nibble;
    //se concateneaza n shiftat la dreapta pentru a face loc nibble ului 
}

uint32_t swaprot(uint32_t n)
{
    //se schimba cele doua jumatati ale numarului si se concateneaza, dupa care se aplica rotate right precum cerinta din enunt
    uint32_t right_half = n << (sizeof(n) * 8 / 2);
    uint32_t left_half = n >> (sizeof(n) * 8 / 2);
    uint32_t result = right_half | left_half;
    return rotate_right(result);
}

int main ()
{
    uint32_t example_number = 0xAB452EF3;
    uint32_t copy = example_number;
    uint32_t maximum = example_number;
    //se repeta swaprot pana cand numarul ajunge inevitabil in pozitia de pornire, moment in care se iese din loop si se afiseaza nr maxim
    do{
        example_number = swaprot(example_number);
        
        if(example_number > maximum){
            maximum = example_number;
        }
    }
    while(example_number != copy);
    
    printf("%x", maximum);
    return 0;
}


/*
2EF30000
0000AB45

2EF3AB45 
50000000
02EF3AB4
52EF3AB4
3AB452EF
F3AB45
*/


/*

~~Deschiderea unui fisier- folositor pt a 4 a problema


int main (char argc, char **argv)
{
    FILE *file = fopen(argv[1], "r");
    if(file == NULL){
        perror("FUCK ARIESANU");
        return -1;
    }
*/




--------------------------------------------------------------------------------------------

// (10 points) Implement a C function, uint64 t fA(uint64 t a, uint8 t k) which returns the maximum value which can
// be obtained from a contiguous sub-sequence of k bits from a.

/*
0XABC123DEA582EFFD
K = 4
1010101111000001001000111101111010100101100000101110111111111101
*/

#include<stdio.h>
#include<stdint.h>

uint64_t fA(uint64_t a, uint8_t k){
    uint64_t maximum_value = 0;
    //se intializeaza maximum_value cu 0
    for(int i = 0; i < sizeof(a) * 8 - k; i ++){
        uint64_t extracted_byte = ((a << i) >> (sizeof(a) * 8 - k));
        //mai intai se shifteaza la stanga pentru a aduce in "prim plan" chunk ul pe care il avem in vizoe
        //dupa care se shifteaza la dreapta cu sizeof(in cazul nostru 8) * 8 pt ca fiecare byte are 8 biti - k (cu remarca am gresit, e -k nu -k-i)
        //se compara cu maximum_value
        if(extracted_byte > maximum_value){
            
            maximum_value = extracted_byte;
        }
    }
    return maximum_value;
}
int main ()
{
    uint64_t a = 0XABC123DEA582EFFD;
    uint8_t k = 10;
    printf("%lx", fA(a,k));
    return 0;
}

/*
1 byte = 8 bits


*/